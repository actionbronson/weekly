/*
 * Weekly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.weekly.api;

import org.weekly.invoker.ApiCallback;
import org.weekly.invoker.ApiClient;
import org.weekly.invoker.ApiException;
import org.weekly.invoker.ApiResponse;
import org.weekly.invoker.Configuration;
import org.weekly.invoker.Pair;
import org.weekly.invoker.ProgressRequestBody;
import org.weekly.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.weekly.model.Week;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarApi {
    private ApiClient localVarApiClient;

    public CalendarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCurrentWeek
     * @param tz the timezone (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentWeekCall(String tz, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/week";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tz != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tz", tz));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentWeekValidateBeforeCall(String tz, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tz' is set
        if (tz == null) {
            throw new ApiException("Missing the required parameter 'tz' when calling getCurrentWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrentWeekCall(tz, _callback);
        return localVarCall;

    }

    /**
     * Get current week based on a timezone
     * 
     * @param tz the timezone (required)
     * @return Week
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current week </td><td>  -  </td></tr>
     </table>
     */
    public Week getCurrentWeek(String tz) throws ApiException {
        ApiResponse<Week> localVarResp = getCurrentWeekWithHttpInfo(tz);
        return localVarResp.getData();
    }

    /**
     * Get current week based on a timezone
     * 
     * @param tz the timezone (required)
     * @return ApiResponse&lt;Week&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current week </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Week> getCurrentWeekWithHttpInfo(String tz) throws ApiException {
        okhttp3.Call localVarCall = getCurrentWeekValidateBeforeCall(tz, null);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current week based on a timezone (asynchronously)
     * 
     * @param tz the timezone (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentWeekAsync(String tz, final ApiCallback<Week> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentWeekValidateBeforeCall(tz, _callback);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextWeek
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The next week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextWeekCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/week/next";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (weekNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekNo", weekNo));
        }

        if (weekYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekYear", weekYear));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextWeekValidateBeforeCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'weekNo' is set
        if (weekNo == null) {
            throw new ApiException("Missing the required parameter 'weekNo' when calling getNextWeek(Async)");
        }
        
        // verify the required parameter 'weekYear' is set
        if (weekYear == null) {
            throw new ApiException("Missing the required parameter 'weekYear' when calling getNextWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getNextWeekCall(weekNo, weekYear, _callback);
        return localVarCall;

    }

    /**
     * Get next week.
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return Week
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The next week </td><td>  -  </td></tr>
     </table>
     */
    public Week getNextWeek(Integer weekNo, Integer weekYear) throws ApiException {
        ApiResponse<Week> localVarResp = getNextWeekWithHttpInfo(weekNo, weekYear);
        return localVarResp.getData();
    }

    /**
     * Get next week.
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return ApiResponse&lt;Week&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The next week </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Week> getNextWeekWithHttpInfo(Integer weekNo, Integer weekYear) throws ApiException {
        okhttp3.Call localVarCall = getNextWeekValidateBeforeCall(weekNo, weekYear, null);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get next week. (asynchronously)
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The next week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextWeekAsync(Integer weekNo, Integer weekYear, final ApiCallback<Week> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextWeekValidateBeforeCall(weekNo, weekYear, _callback);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPreviousWeek
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The previous week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPreviousWeekCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/week/previous";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (weekNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekNo", weekNo));
        }

        if (weekYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekYear", weekYear));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreviousWeekValidateBeforeCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'weekNo' is set
        if (weekNo == null) {
            throw new ApiException("Missing the required parameter 'weekNo' when calling getPreviousWeek(Async)");
        }
        
        // verify the required parameter 'weekYear' is set
        if (weekYear == null) {
            throw new ApiException("Missing the required parameter 'weekYear' when calling getPreviousWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getPreviousWeekCall(weekNo, weekYear, _callback);
        return localVarCall;

    }

    /**
     * Get previous week.
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return Week
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The previous week </td><td>  -  </td></tr>
     </table>
     */
    public Week getPreviousWeek(Integer weekNo, Integer weekYear) throws ApiException {
        ApiResponse<Week> localVarResp = getPreviousWeekWithHttpInfo(weekNo, weekYear);
        return localVarResp.getData();
    }

    /**
     * Get previous week.
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return ApiResponse&lt;Week&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The previous week </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Week> getPreviousWeekWithHttpInfo(Integer weekNo, Integer weekYear) throws ApiException {
        okhttp3.Call localVarCall = getPreviousWeekValidateBeforeCall(weekNo, weekYear, null);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get previous week. (asynchronously)
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The previous week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPreviousWeekAsync(Integer weekNo, Integer weekYear, final ApiCallback<Week> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreviousWeekValidateBeforeCall(weekNo, weekYear, _callback);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWeekOf
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeekOfCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/week/{weekYear}/{weekNo}"
            .replaceAll("\\{" + "weekNo" + "\\}", localVarApiClient.escapeString(weekNo.toString()))
            .replaceAll("\\{" + "weekYear" + "\\}", localVarApiClient.escapeString(weekYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWeekOfValidateBeforeCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'weekNo' is set
        if (weekNo == null) {
            throw new ApiException("Missing the required parameter 'weekNo' when calling getWeekOf(Async)");
        }
        
        // verify the required parameter 'weekYear' is set
        if (weekYear == null) {
            throw new ApiException("Missing the required parameter 'weekYear' when calling getWeekOf(Async)");
        }
        

        okhttp3.Call localVarCall = getWeekOfCall(weekNo, weekYear, _callback);
        return localVarCall;

    }

    /**
     * Get current week based on a timezone
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return Week
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The week </td><td>  -  </td></tr>
     </table>
     */
    public Week getWeekOf(Integer weekNo, Integer weekYear) throws ApiException {
        ApiResponse<Week> localVarResp = getWeekOfWithHttpInfo(weekNo, weekYear);
        return localVarResp.getData();
    }

    /**
     * Get current week based on a timezone
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @return ApiResponse&lt;Week&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The week </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Week> getWeekOfWithHttpInfo(Integer weekNo, Integer weekYear) throws ApiException {
        okhttp3.Call localVarCall = getWeekOfValidateBeforeCall(weekNo, weekYear, null);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current week based on a timezone (asynchronously)
     * 
     * @param weekNo ISO 8601 relative week (number). (required)
     * @param weekYear ISO 8601 relative week (year). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The week </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeekOfAsync(Integer weekNo, Integer weekYear, final ApiCallback<Week> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWeekOfValidateBeforeCall(weekNo, weekYear, _callback);
        Type localVarReturnType = new TypeToken<Week>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
