/*
 * Weekly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.weekly.api;

import org.weekly.invoker.ApiCallback;
import org.weekly.invoker.ApiClient;
import org.weekly.invoker.ApiException;
import org.weekly.invoker.ApiResponse;
import org.weekly.invoker.Configuration;
import org.weekly.invoker.Pair;
import org.weekly.invoker.ProgressRequestBody;
import org.weekly.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.weekly.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTasks
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (required)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (required)
     * @param task The task(s) you wish to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created task(s). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTasksCall(Integer weekNo, Integer weekYear, List<Task> task, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (weekNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekNo", weekNo));
        }

        if (weekYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekYear", weekYear));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTasksValidateBeforeCall(Integer weekNo, Integer weekYear, List<Task> task, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'weekNo' is set
        if (weekNo == null) {
            throw new ApiException("Missing the required parameter 'weekNo' when calling createTasks(Async)");
        }
        
        // verify the required parameter 'weekYear' is set
        if (weekYear == null) {
            throw new ApiException("Missing the required parameter 'weekYear' when calling createTasks(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling createTasks(Async)");
        }
        

        okhttp3.Call localVarCall = createTasksCall(weekNo, weekYear, task, _callback);
        return localVarCall;

    }

    /**
     * Create tasks.
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (required)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (required)
     * @param task The task(s) you wish to create (required)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created task(s). </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> createTasks(Integer weekNo, Integer weekYear, List<Task> task) throws ApiException {
        ApiResponse<List<Task>> localVarResp = createTasksWithHttpInfo(weekNo, weekYear, task);
        return localVarResp.getData();
    }

    /**
     * Create tasks.
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (required)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (required)
     * @param task The task(s) you wish to create (required)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created task(s). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> createTasksWithHttpInfo(Integer weekNo, Integer weekYear, List<Task> task) throws ApiException {
        okhttp3.Call localVarCall = createTasksValidateBeforeCall(weekNo, weekYear, task, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tasks. (asynchronously)
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (required)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (required)
     * @param task The task(s) you wish to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created task(s). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTasksAsync(Integer weekNo, Integer weekYear, List<Task> task, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTasksValidateBeforeCall(weekNo, weekYear, task, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decrementTaskPriority
     * @param id the task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decrementTaskPriorityCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{id}/priority/decrement"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decrementTaskPriorityValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling decrementTaskPriority(Async)");
        }
        

        okhttp3.Call localVarCall = decrementTaskPriorityCall(id, _callback);
        return localVarCall;

    }

    /**
     * Decrement a task priority.
     * 
     * @param id the task id (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task decrementTaskPriority(String id) throws ApiException {
        ApiResponse<Task> localVarResp = decrementTaskPriorityWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Decrement a task priority.
     * 
     * @param id the task id (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> decrementTaskPriorityWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = decrementTaskPriorityValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Decrement a task priority. (asynchronously)
     * 
     * @param id the task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decrementTaskPriorityAsync(String id, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = decrementTaskPriorityValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasks
     * @param requestBody The task(s) you wish to update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task are deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteTasksCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * Delete a task.
     * 
     * @param requestBody The task(s) you wish to update (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task are deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasks(List<String> requestBody) throws ApiException {
        deleteTasksWithHttpInfo(requestBody);
    }

    /**
     * Delete a task.
     * 
     * @param requestBody The task(s) you wish to update (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task are deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksValidateBeforeCall(requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a task. (asynchronously)
     * 
     * @param requestBody The task(s) you wish to update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task are deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksAsync(List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksValidateBeforeCall(requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIndividualTask
     * @param id the task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualTaskCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndividualTaskValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIndividualTask(Async)");
        }
        

        okhttp3.Call localVarCall = getIndividualTaskCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get task.
     * 
     * @param id the task id (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task getIndividualTask(String id) throws ApiException {
        ApiResponse<Task> localVarResp = getIndividualTaskWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get task.
     * 
     * @param id the task id (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> getIndividualTaskWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getIndividualTaskValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task. (asynchronously)
     * 
     * @param id the task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualTaskAsync(String id, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndividualTaskValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasks
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (optional)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (weekNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekNo", weekNo));
        }

        if (weekYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weekYear", weekYear));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksValidateBeforeCall(Integer weekNo, Integer weekYear, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTasksCall(weekNo, weekYear, _callback);
        return localVarCall;

    }

    /**
     * Get tasks for a week.
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (optional)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (optional)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> getTasks(Integer weekNo, Integer weekYear) throws ApiException {
        ApiResponse<List<Task>> localVarResp = getTasksWithHttpInfo(weekNo, weekYear);
        return localVarResp.getData();
    }

    /**
     * Get tasks for a week.
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (optional)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (optional)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> getTasksWithHttpInfo(Integer weekNo, Integer weekYear) throws ApiException {
        okhttp3.Call localVarCall = getTasksValidateBeforeCall(weekNo, weekYear, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks for a week. (asynchronously)
     * 
     * @param weekNo ISO 8601 relative week (number).  Defaults to current weekNo. (optional)
     * @param weekYear ISO 8601 relative week (year).  Defaults to current weekYear. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksAsync(Integer weekNo, Integer weekYear, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksValidateBeforeCall(weekNo, weekYear, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incrementTaskPriority
     * @param id the task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incrementTaskPriorityCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{id}/priority/increment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incrementTaskPriorityValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling incrementTaskPriority(Async)");
        }
        

        okhttp3.Call localVarCall = incrementTaskPriorityCall(id, _callback);
        return localVarCall;

    }

    /**
     * Increment a task priority.
     * 
     * @param id the task id (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task incrementTaskPriority(String id) throws ApiException {
        ApiResponse<Task> localVarResp = incrementTaskPriorityWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Increment a task priority.
     * 
     * @param id the task id (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> incrementTaskPriorityWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = incrementTaskPriorityValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Increment a task priority. (asynchronously)
     * 
     * @param id the task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incrementTaskPriorityAsync(String id, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = incrementTaskPriorityValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskById
     * @param id the task id (required)
     * @param task The task to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskByIdCall(String id, Task task, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/task/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskByIdValidateBeforeCall(String id, Task task, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTaskById(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling updateTaskById(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskByIdCall(id, task, _callback);
        return localVarCall;

    }

    /**
     * Update a task.
     * 
     * @param id the task id (required)
     * @param task The task to update (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task updateTaskById(String id, Task task) throws ApiException {
        ApiResponse<Task> localVarResp = updateTaskByIdWithHttpInfo(id, task);
        return localVarResp.getData();
    }

    /**
     * Update a task.
     * 
     * @param id the task id (required)
     * @param task The task to update (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> updateTaskByIdWithHttpInfo(String id, Task task) throws ApiException {
        okhttp3.Call localVarCall = updateTaskByIdValidateBeforeCall(id, task, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task. (asynchronously)
     * 
     * @param id the task id (required)
     * @param task The task to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskByIdAsync(String id, Task task, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskByIdValidateBeforeCall(id, task, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskLabel
     * @param id the task id (required)
     * @param label the task label (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskLabelCall(String id, String label, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{id}/label"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskLabelValidateBeforeCall(String id, String label, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTaskLabel(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling updateTaskLabel(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskLabelCall(id, label, _callback);
        return localVarCall;

    }

    /**
     * Update a task label.
     * 
     * @param id the task id (required)
     * @param label the task label (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task updateTaskLabel(String id, String label) throws ApiException {
        ApiResponse<Task> localVarResp = updateTaskLabelWithHttpInfo(id, label);
        return localVarResp.getData();
    }

    /**
     * Update a task label.
     * 
     * @param id the task id (required)
     * @param label the task label (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> updateTaskLabelWithHttpInfo(String id, String label) throws ApiException {
        okhttp3.Call localVarCall = updateTaskLabelValidateBeforeCall(id, label, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task label. (asynchronously)
     * 
     * @param id the task id (required)
     * @param label the task label (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskLabelAsync(String id, String label, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskLabelValidateBeforeCall(id, label, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskState
     * @param id the task id (required)
     * @param state the task state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskStateCall(String id, String state, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskStateValidateBeforeCall(String id, String state, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTaskState(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling updateTaskState(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskStateCall(id, state, _callback);
        return localVarCall;

    }

    /**
     * Update a task state.
     * 
     * @param id the task id (required)
     * @param state the task state (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public Task updateTaskState(String id, String state) throws ApiException {
        ApiResponse<Task> localVarResp = updateTaskStateWithHttpInfo(id, state);
        return localVarResp.getData();
    }

    /**
     * Update a task state.
     * 
     * @param id the task id (required)
     * @param state the task state (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> updateTaskStateWithHttpInfo(String id, String state) throws ApiException {
        okhttp3.Call localVarCall = updateTaskStateValidateBeforeCall(id, state, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task state. (asynchronously)
     * 
     * @param id the task id (required)
     * @param state the task state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> . </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskStateAsync(String id, String state, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskStateValidateBeforeCall(id, state, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTasks
     * @param task The tasks you wish to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tasks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTasksCall(List<Task> task, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTasksValidateBeforeCall(List<Task> task, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling updateTasks(Async)");
        }
        

        okhttp3.Call localVarCall = updateTasksCall(task, _callback);
        return localVarCall;

    }

    /**
     * Update a tasks.
     * 
     * @param task The tasks you wish to update (required)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tasks. </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> updateTasks(List<Task> task) throws ApiException {
        ApiResponse<List<Task>> localVarResp = updateTasksWithHttpInfo(task);
        return localVarResp.getData();
    }

    /**
     * Update a tasks.
     * 
     * @param task The tasks you wish to update (required)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tasks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> updateTasksWithHttpInfo(List<Task> task) throws ApiException {
        okhttp3.Call localVarCall = updateTasksValidateBeforeCall(task, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tasks. (asynchronously)
     * 
     * @param task The tasks you wish to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tasks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTasksAsync(List<Task> task, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTasksValidateBeforeCall(task, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
