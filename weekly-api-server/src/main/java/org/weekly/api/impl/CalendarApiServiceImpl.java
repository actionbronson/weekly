package org.weekly.api.impl;

import io.vavr.control.Try;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.stereotype.Controller;
import org.threeten.extra.YearWeek;
import org.weekly.api.CalendarApi;
import org.weekly.model.Day;
import org.weekly.model.Week;

import javax.validation.constraints.NotNull;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalAdjusters;
import java.util.TimeZone;

import static java.lang.String.format;

/**
 * Weekly
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */
@Controller
public class CalendarApiServiceImpl implements CalendarApi {
    // As per ISO8601 standard
    private final static DayOfWeek WEEK_START = DayOfWeek.MONDAY;
    private final static DayOfWeek WEEK_END = DayOfWeek.SUNDAY;

    private final Logger logger = LoggerFactory.getLogger(CalendarApiServiceImpl.class);

    @Autowired
    private OAuth2AuthorizedClientService oAuth2ClientService;

    @Override
    public Week getCurrentWeek(@NotNull String tz) {
//        SecurityContext context = SecurityContextHolder.getContext();
//        OAuth2AuthenticationToken auth = (OAuth2AuthenticationToken) context.getAuthentication();
//        OAuth2AuthorizedClient client = oAuth2ClientService.loadAuthorizedClient(auth.getAuthorizedClientRegistrationId(), auth.getName());
//        String token = client.getAccessToken().getTokenValue();
        try {
            final ZoneId zoneId = Try.of(() -> ZoneId.of(tz))
                    .orElse(Try.of(() -> TimeZone.getTimeZone(tz).toZoneId()))
                    .getOrElse(ZoneId.systemDefault());
            final LocalDate now = getNow(zoneId);
            final LocalDate startOfWeek = now.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));
            final LocalDate endOfWeek = now.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));
            logger.info(format("startOfWeek: %s, endOfWeek: %s", startOfWeek, endOfWeek));
            return new Week()
                    .year(now.getYear())
                    .weekNo(getNow(zoneId).get(IsoFields.WEEK_OF_WEEK_BASED_YEAR))
                    .start(fromDayOfWeek(startOfWeek))
                    .end(fromDayOfWeek(endOfWeek));
        }
        catch (Exception e) {
            logger.error("Could not get current week.",e);
            throw e;
        }
    }

    @Override
    public Week getNextWeek(@NotNull Integer weekNo, @NotNull Integer weekYear) {
        LocalDate date = endOfWeek(weekNo, weekYear);
        LocalDate startOfNextWeek = date.with(TemporalAdjusters.next(WEEK_START));
        LocalDate endOfNextWeek = startOfNextWeek.with(TemporalAdjusters.next(WEEK_END));
        return new Week()
                .year(startOfNextWeek.get(IsoFields.WEEK_BASED_YEAR))
                .weekNo(startOfNextWeek.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR))
                .start(fromDayOfWeek(startOfNextWeek))
                .end(fromDayOfWeek(endOfNextWeek));
    }

    @Override
    public Week getPreviousWeek(@NotNull Integer weekNo, @NotNull  Integer weekYear) {
        LocalDate date = startOfWeek(weekNo, weekYear);
        LocalDate startOfPreviousWeek = date.with(TemporalAdjusters.previous(WEEK_START));
        LocalDate endOfPreviousWeek = startOfPreviousWeek.with(TemporalAdjusters.next(WEEK_END));
        return new Week()
                .year(startOfPreviousWeek.get(IsoFields.WEEK_BASED_YEAR))
                .weekNo(startOfPreviousWeek.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR))
                .start(fromDayOfWeek(startOfPreviousWeek))
                .end(fromDayOfWeek(endOfPreviousWeek));
    }

    public LocalDate getNow(ZoneId zoneId) {
        return LocalDate.now(zoneId);
    }

    private static Day fromDayOfWeek(LocalDate day) {
        return new Day().dayOfYear(day.getDayOfYear()).year(day.getYear());
    }

    private static LocalDate startOfWeek(int weekNo, int weekYear) {
        YearWeek week = YearWeek.of(weekYear, weekNo);
        return week.atDay(WEEK_START);
    }

    private static LocalDate endOfWeek(int weekNo, int weekYear) {
        YearWeek week = YearWeek.of(weekYear, weekNo);
        return week.atDay(WEEK_END);
    }
}
