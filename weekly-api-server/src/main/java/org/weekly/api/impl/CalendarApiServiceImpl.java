package org.weekly.api.impl;

import io.vavr.control.Try;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.weekly.api.CalendarApi;
import org.weekly.model.Day;
import org.weekly.model.Week;

import javax.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.WeekFields;
import java.util.*;

import static java.lang.String.format;

/**
 * Weekly
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */
@Service
public class CalendarApiServiceImpl implements CalendarApi {

    private static final Map<String,DayOfWeek> CALENDAR_DAY = Map.of(
            "SUN", DayOfWeek.SUNDAY,
            "MON", DayOfWeek.MONDAY,
            "TUE", DayOfWeek.TUESDAY,
            "WED", DayOfWeek.WEDNESDAY,
            "THU", DayOfWeek.THURSDAY,
            "FRI", DayOfWeek.FRIDAY,
            "SAT", DayOfWeek.SATURDAY
    );
    private static final DayOfWeek DEFAULT_START = DayOfWeek.SUNDAY;
    private static final int DAYS_IN_WEEK = 7;

    private final Logger logger = LoggerFactory.getLogger(CalendarApiServiceImpl.class);

    @Override
    public Week getCurrentWeek(@NotNull String tz, @NotNull String weekStart) {
        try {
            final ZoneId zoneId = Try.of(() -> ZoneId.of(tz))
                    .orElse(Try.of(() -> TimeZone.getTimeZone(tz).toZoneId()))
                    .getOrElse(ZoneId.systemDefault());
            final DayOfWeek fistDayOfWeek =
                    WeekFields.of(CALENDAR_DAY.getOrDefault(weekStart.toUpperCase(), DEFAULT_START), DAYS_IN_WEEK)
                        .getFirstDayOfWeek();
            LocalDate startOfWeek = getNow(zoneId).with(TemporalAdjusters.previousOrSame(fistDayOfWeek));
            LocalDate endOfWeek = getNow(zoneId).with(TemporalAdjusters.nextOrSame(fistDayOfWeek.minus(1)));
            logger.info(format("startOfWeek: %s, endOfWeek: %s", startOfWeek, endOfWeek));
            return new Week()
                    .start(fromDayOfWeek(startOfWeek))
                    .end(fromDayOfWeek(endOfWeek));
        }
        catch (Exception e) {
            logger.error("Could not get current week.",e);
            throw e;
        }
    }

    @Override
    public Week getNextWeek(@NotNull Integer year, @NotNull Integer weekEnd) {
        LocalDate date = LocalDate.ofYearDay(year, weekEnd);
        LocalDate startOfNextWeek = date.with(TemporalAdjusters.next(date.getDayOfWeek().plus(1)));
        LocalDate endOfNextWeek = date.with(TemporalAdjusters.next(date.getDayOfWeek()));
        return new Week().start(fromDayOfWeek(startOfNextWeek)).end(fromDayOfWeek(endOfNextWeek));
    }

    @Override
    public Week getPreviousWeek(@NotNull Integer year, @NotNull Integer weekStart) {
        LocalDate date = LocalDate.ofYearDay(year, weekStart);
        LocalDate startOfPreviousWeek = date.with(TemporalAdjusters.previous(date.getDayOfWeek()));
        LocalDate endOfPreviousWeek = date.with(TemporalAdjusters.previous(date.getDayOfWeek().minus(1)));
        return new Week().start(fromDayOfWeek(startOfPreviousWeek)).end(fromDayOfWeek(endOfPreviousWeek));
    }

    public LocalDate getNow(ZoneId zoneId) {
        return LocalDate.now(zoneId);
    }

    private static Day fromDayOfWeek(LocalDate day) {
        return new Day().dayOfYear(day.getDayOfYear()).year(day.getYear());
    }
}

