/**
 * PlanIt
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.weekly.api;

import com.jayway.jsonpath.spi.json.JacksonJsonProvider;
import org.junit.Assert;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.support.AnnotationConfigContextLoader;
import org.springframework.test.util.ReflectionTestUtils;
import org.weekly.api.impl.CalendarApiServiceImpl;
import org.weekly.model.Week;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;



/**
 * PlanIt
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API tests for CalendarApi 
 */
@RunWith(MockitoJUnitRunner.class)
@ComponentScan(basePackages = "org.weekly.api")
//@ContextConfiguration(loader= AnnotationConfigContextLoader.class)
public class CalendarApiTest {
    @Mock
    private CalendarApiServiceImpl calendarApiService;

    @Before
    public void setupCalendarApi() {
        ReflectionTestUtils.setField(calendarApiService, "logger", LoggerFactory.getLogger(CalendarApiServiceImpl.class));
    }

    @Test
    public void gettingCurrentWeek()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 14));
        Mockito.when(calendarApiService.getCurrentWeek("EST", "SUN")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST", "SUN");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(12));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(18));
    }

    @Test
    public void gettingCurrentWeek_edge_start()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 12));
        Mockito.when(calendarApiService.getCurrentWeek("EST", "SUN")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST", "SUN");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(12));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(18));
    }

    @Test
    public void gettingCurrentWeek_edge_end()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 18));
        Mockito.when(calendarApiService.getCurrentWeek("EST", "SUN")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST", "SUN");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(12));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(18));
    }
}
