/**
 * PlanIt
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.weekly.api;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.util.ReflectionTestUtils;
import org.weekly.api.impl.CalendarApiServiceImpl;
import org.weekly.model.Week;

import java.time.LocalDate;
import java.time.ZoneId;



/**
 * PlanIt
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API tests for CalendarApi 
 */
@RunWith(MockitoJUnitRunner.class)
@ComponentScan(basePackages = "org.weekly.api")
//@ContextConfiguration(loader= AnnotationConfigContextLoader.class)
public class CalendarApiTest {
    @Mock
    private CalendarApiServiceImpl calendarApiService;

    @Before
    public void setupCalendarApi() {
        ReflectionTestUtils.setField(calendarApiService, "logger", LoggerFactory.getLogger(CalendarApiServiceImpl.class));
    }

    @Test
    public void gettingCurrentWeek()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 14));
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(13));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(19));
    }

    @Test
    public void gettingCurrentWeek_edge_start()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 12));
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(6));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(12));
    }

    @Test
    public void gettingCurrentWeek_edge_end()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 18));
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST");
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(13));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(19));
    }

    @Test
    public void gettingCurrentWeek_JanuaryFirstWeek()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 1));
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();
        Week week = calendarApiService.getCurrentWeek("EST");
        Assert.assertEquals(week.getWeekNo(), Integer.valueOf(1));
        Assert.assertEquals(week.getYear(), Integer.valueOf(2020));
        Assert.assertEquals(week.getStart().getDayOfYear(), Integer.valueOf(364));
        Assert.assertEquals(week.getEnd().getDayOfYear(), Integer.valueOf(5));
    }

    @Test
    public void gettingPreviousWeek_JanuaryFirstWeek()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 1));
        Mockito.when(calendarApiService.getPreviousWeek(Mockito.anyInt(), Mockito.anyInt())).thenCallRealMethod();
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();

        Week week = calendarApiService.getCurrentWeek("EST");
        Week previousWeek = calendarApiService.getPreviousWeek(week.getWeekNo(), week.getYear());
        Assert.assertEquals(previousWeek.getWeekNo(), Integer.valueOf(52));
        Assert.assertEquals(previousWeek.getYear(), Integer.valueOf(2019));
        Assert.assertEquals(previousWeek.getStart().getDayOfYear(), Integer.valueOf(357));
        Assert.assertEquals(previousWeek.getEnd().getDayOfYear(), Integer.valueOf(363));
    }

    @Test
    public void gettingPreviousWeekNextWeek_JanuaryFirstWeek()
    {
        Mockito.when(calendarApiService.getNow(Mockito.any(ZoneId.class))).thenReturn(LocalDate.ofYearDay(2020, 1));
        Mockito.when(calendarApiService.getPreviousWeek(Mockito.anyInt(), Mockito.anyInt())).thenCallRealMethod();
        Mockito.when(calendarApiService.getNextWeek(Mockito.anyInt(), Mockito.anyInt())).thenCallRealMethod();
        Mockito.when(calendarApiService.getCurrentWeek("EST")).thenCallRealMethod();

        Week week = calendarApiService.getCurrentWeek("EST");
        Week previousWeek = calendarApiService.getPreviousWeek(week.getWeekNo(), week.getYear());
        Week nextWeek = calendarApiService.getNextWeek(previousWeek.getWeekNo(), previousWeek.getYear());

        Assert.assertEquals(week.getYear(), nextWeek.getYear());
        Assert.assertEquals(week.getWeekNo(), nextWeek.getWeekNo());
        Assert.assertEquals(week.getStart().getDayOfYear(), nextWeek.getStart().getDayOfYear());
        Assert.assertEquals(week.getEnd().getDayOfYear(), nextWeek.getEnd().getDayOfYear());
    }
}
